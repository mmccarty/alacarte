%fieldset
  = render :partial => '/module/edit_top'
  - if flash[:error]
    #error_wrapper
      #list_error= flash[:error]
  = error_messages_for 'mod'
  #mo{:style => ""}
    = form_for :mod, :url => { :action => :update_databases , :id => @mod.id} do |form|
      = render :partial => '/module/mod_title'
      %label
        General Information
        %span.more_help{:onmouseout => "delayhidetip();", :onmouseover => "fixedtooltip(DB_INFO_MSSG, this, event, '');"}= image_tag("icons/small_help.png", :alt => 'Tip', :border => 0)
        = text_area_tag 'mod', 'info', :class => "tinymce"
        %br/
      #link{:style => ""}
        %label= content_tag :a, image_tag("icons/add.png", :title => 'Click to add databases', :alt => 'add databases', :border => 0) + " Add Databases", :onclick => "$('db').toggle(); + $('mo').toggle(); + $('link').toggle();"
      %label
        Selected Databases
        %span.more_help{:onmouseout => "delayhidetip();", :onmouseover => "fixedtooltip(DB_MSSG, this, event, '260');"}
          = image_tag("icons/small_help.png", :alt => 'Tip', :border => 0)
      %table#db_list{:cellpadding => "0", :cellspacing => "0"}
        %tr
          %th Order
          %th Description
          %th Remove
        - for @database_dod in  @mod.database_dods
        - dod = @database_dod.dod
        - if !dod.blank?
        %tr
          = fields_for "database_dod[]" do |d|
            %td= d.text_field(:location, :size => 1)
            %td
              %strong
                = truncate(dod.title,:length => 47)
              %br/
              = d.text_area(:description, :class => 'tinymce', :size => '40x5')
              = tinymce
            %td
              = check_box_tag("db_remove_list[]", dod.id ,false, {})
              = image_tag("icons/remove.png", :title => 'Remove this database', :alt => 'remove', :border => 0)
    #submit_button
      = submit_tag 'Save Module', :class => "submit"
      %p
        = link_to 'Cancel', :controller => 'module', :action => 'index',:id => @mod, :type =>@mod.class, :list => 'mine', :sort => 'name'
  #db{:style => "display:none"}
    %label Add Databases
    %p Select the databases you want to add to this module and then click the button to add them.
    = form_tag({:controller => 'database', :action => 'add_databases', :id => @mod} , {:multipart => true})  do
      #a_z_list
        %h4
          %p
            = sort_links("A")
            \&nbsp; #{sort_links("B")}&nbsp;
            \#{sort_links("C")}&nbsp; #{sort_links("D")}&nbsp;
            \#{sort_links("E")}&nbsp; #{sort_links("F")}&nbsp;
            \#{sort_links("G")}&nbsp; #{sort_links("H")}&nbsp;
            \#{sort_links("I")}&nbsp; #{sort_links("J")}&nbsp;
            \#{sort_links("K")}&nbsp; #{sort_links("L")}&nbsp;
            \#{sort_links("M")}&nbsp; #{sort_links("N")}&nbsp;
            
            \#{sort_links("O")}&nbsp; #{sort_links("P")}&nbsp;
            \#{sort_links("Q")}&nbsp; #{sort_links("R")}&nbsp;
            \#{sort_links("S")}&nbsp; #{sort_links("T")}&nbsp;
            \#{sort_links("U")}&nbsp; #{sort_links("V")}&nbsp;
            \#{sort_links("W")}&nbsp; #{sort_links("X")}&nbsp;
            \#{sort_links("Y")}&nbsp; #{sort_links("Z")}&nbsp;
        %p
          %strong
            Databases starting with: #{@letter}
    %ul.undeco
      - @dbs.each do |db|
        %li
          = check_box_tag(db.id, db.id,session[:selected].include?(db.id.to_s) || @mod.dods.include?(db), :onclick => remote_function( :url => {:controller => 'database', :action => 'add_databases',:cid => db, :id =>@mod}))
          = db.title
      #submit_button
        = submit_tag 'Add Databases', :class => "submit"
        %p
          = content_tag :a, "Cancel", :onclick => "$('db').toggle(); + $('mo').toggle(); + $('link').toggle();"
